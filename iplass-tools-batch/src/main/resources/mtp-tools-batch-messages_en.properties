#Generated by ResourceBundle Editor (http://essiembre.github.io/eclipse-rbe/)
# Copyright (C) 2017 INFORMATION SERVICES INTERNATIONAL - DENTSU, LTD. All Rights Reserved.
#
# Unless you have purchased a commercial license,
# the following license terms apply:
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

Common.continueMsg          = Do you want to continue?
Common.errorMsg             = An unexpected error has occurred. : {0}
Common.inputTenantUrlMsg    = Input the tenant url. (-show: Tenant List, -env:Environment)
Common.notExistsTenantIdMsg = Tenant does not exist. : id = {0}
Common.notExistsTenantMsg   = Tenant does not exist. : url = {0}
Common.requiredMsg          = {0} is required.
Common.requiredTenantUrlMsg = Tenant url is required.

EQLExecutor.invalidTenantId = Tenant ID is invalid. : id = {0}
EQLExecutor.notFoundTenant  = Tenant of tenant ID({0}) can not be found.
EQLExecutor.notSpecifiedEQL = EQL has not been specified.

EntityJavaMappingClassCreator.Wizard.basePackageMsg     = Input the base package name.
EntityJavaMappingClassCreator.Wizard.entityPathMsg      = Input the name or hierarchy path of entity.
EntityJavaMappingClassCreator.Wizard.forceMsg           = If Java files already exist, do you forcibly overwrite?
EntityJavaMappingClassCreator.Wizard.invalidTenantIdMsg = Please enter only numeric.
EntityJavaMappingClassCreator.Wizard.outDirMsg          = Input the output directory.
EntityJavaMappingClassCreator.Wizard.recursiveMsg       = Do you want to target all entities under the specified hierarchy path? (When hierarchical path is specified.)
EntityJavaMappingClassCreator.Wizard.tenantIdMsg        = Input the tenant ID.
EntityJavaMappingClassCreator.confirmOverwrite          = Java file ({0}) already exists. Do you want to overwrite?
EntityJavaMappingClassCreator.notFoundTenant            = Tenant of tenant ID({0}) can not be found.

ExportMetaDataNameList.Wizard.createdInputDirMsg          = Created a directory. : dir = {0}
ExportMetaDataNameList.Wizard.inputDirMsg                 = Input the output directory.
ExportMetaDataNameList.Wizard.inputFileNameMsg            = Input the output file name.
ExportMetaDataNameList.Wizard.inputMetaDataFileMsg        = Input the metadata file path.
ExportMetaDataNameList.Wizard.notDirMsg                   = [{0}] is not a directory.
ExportMetaDataNameList.Wizard.notExistsMetaDataFileMsg    = File does not exist.
ExportMetaDataNameList.Wizard.notFileMsg                  = [{0}] is not a file.
ExportMetaDataNameList.Wizard.requiredMetaDataFilePathMsg = File path is required.

MenuGenerator.createdMenuMsg        = Created a Menu. : name = {0}
MenuGenerator.sharedCanceledMenuMsg = Did not create for Menu is shared. : name = {0}
MenuGenerator.updatedMenuMsg        = Updated a Menu. : name = {0}

MetaDataExport.Silent.notExistsConfigFileMsg      = metadata config file does not exist. path={0}
MetaDataExport.Silent.requiredConfigFileMsg       = config file path is required. key={0}
MetaDataExport.Wizard.confirmExecuteMsg           = Do you want to export the metadata with the contents of the above?
MetaDataExport.Wizard.confirmExportAllMetaMsg     = Do you want to Export all the metadata?
MetaDataExport.Wizard.confirmIncludeTenantMetaMsg = Do you want to Export the Tenant metadata?
MetaDataExport.Wizard.confirmRetryMsg             = Do you try again?
MetaDataExport.Wizard.confirmShowMetaListMsg      = Target metadata is {0}. Do you want to display a list?
MetaDataExport.Wizard.confirmTargetLocalMetaMsg   = Do you want to Export to target only the metadata of the Local?
MetaDataExport.Wizard.inputDirMsg                 = Input the output directory.
MetaDataExport.Wizard.inputFileNameMsg            = Input the File name.
MetaDataExport.Wizard.inputMetaPathMsg            = Please specify the metadata path the Export target. (Example : /action/mtp/*, /ntity/Sample01, /entity/samples/*)
MetaDataExport.Wizard.requiredMetaPathMsg         = Metadata path is required.
MetaDataExport.completedExportMetaData            = The export of the metadata is complete.
MetaDataExport.createdDirMsg                      = Created a directory. : dir = {0}
MetaDataExport.errorOutputMetaData                = [{0}] : Error.
MetaDataExport.excludeNotLocalMetaLog             = Excluded from [{0}] is not a Local.
MetaDataExport.nonTargetMetaData                  = Metadata is not a export target.
MetaDataExport.notDirMsg                          = [{0}] is not a directory.
MetaDataExport.notFoundMetaLog                    = Match the [{0}] metadata is not found.
MetaDataExport.outputMetaData                     = [{0}] : Complete.
MetaDataExport.startExportMetaData                = Start the export of metadata.
MetaDataExport.warningOutputMetaData              = [{0}] : Warning.

MetaDataImport.Silent.notExistsConfigFileMsg    = metadata config file does not exist. path={0}
MetaDataImport.Wizard.confirmExecuteMsg         = Do you want to import the metadata with the contents of the above?
MetaDataImport.Wizard.confirmRetryMsg           = Do you try again?
MetaDataImport.Wizard.confirmShowMetaListMsg    = Target metadata is {0}. Do you want to display a list?
MetaDataImport.Wizard.inputImportFileMsg        = Input the import file path.
MetaDataImport.Wizard.notIncludeMetaMsg         = Target metadata is zero.
MetaDataImport.Wizard.requiredImportFilePathMsg = Import file path is required.
MetaDataImport.completedImportMetaLog           = The import of the metadata is complete.
MetaDataImport.errorAnalysisFileMsg             = An error has occurred in the analysis of the import file. : {0}
MetaDataImport.includeWarnTenantMetaMsg         = Tenant data of warning is included. Skip because they do not import this data in a batch process.
MetaDataImport.notExistsImportFileMsg           = Import file does not exist.
MetaDataImport.notIncludeMetaLog                = Metadata is not included.
MetaDataImport.startImportMetaLog               = Start the import of metadata.

MySQLPartitionManager.Create.confirmCreatePartitionMsg                       = Create the partition. Would you like?
MySQLPartitionManager.Create.createExistTenantPartitionMsg                   = Add the partition because there is no Partition to the tenant ({0}) .
MySQLPartitionManager.Create.createdPartitionMsg                             = Created a Partition. : name = {0}
MySQLPartitionManager.Create.inputMaxTenantIdMsg                             = Input the max tenant id. (-show: Partition List, -env:Environment)
MySQLPartitionManager.Create.requiredMaxTenantIdMsg                          = Max tenant id is required.
MySQLPartitionManager.Create.skipPartitionMsg                                = Skip the creation process, because it already has partition to {0} exists.: table = {1}
MySQLPartitionManager.Create.useSubPartitionMsg                              = Do you want to use the sub-partition?
MySQLPartitionManager.Create.warnMaxTenantIdMsg                              = Please enter only numeric.
MySQLPartitionManager.Delete.droppedPartitionMsg                             = Dropped the Partition. : name = {0}
MySQLPartitionManager.Delete.skipDropPartitionMsg                            = Skip drop Partition because {0} does not exist.

MySQLPartitionManagerApp.PartitionCreateDialog.confirmCreatePartitionMsg     = Create the partition. Would you like?
MySQLPartitionManagerApp.PartitionCreateDialog.createCompleteMsg             = Create the partition has been completed.
MySQLPartitionManagerApp.PartitionCreateDialog.createPartitionLabel          = Create the partition.
MySQLPartitionManagerApp.PartitionCreateDialog.inputMaxTenantIdMsg           = Input the max tenant id.
MySQLPartitionManagerApp.PartitionCreateDialog.messageFont                   = Monospaced
MySQLPartitionManagerApp.PartitionCreateDialog.startCreatePartitionLog       = Start creating the partition.
MySQLPartitionManagerApp.PartitionCreateDialog.warnAlterTablePermissionLabel = *To create Partition, the you must have ALTER TABLE permissions.

ObjStoreDDLGenerator.Wizard.confirmPartitionMsg = Do you want to create a partition ?
ObjStoreDDLGenerator.Wizard.createdOutputDirMsg = Created a directory. : dir = {0}
ObjStoreDDLGenerator.Wizard.notDirMsg           = [{0}] is not a directory.
ObjStoreDDLGenerator.Wizard.notExistsDirMsg     = [{0}] Directory does not exist.
ObjStoreDDLGenerator.Wizard.notStorageSpaceMsg  = [{0}] of definition can not be found in the service-config.
ObjStoreDDLGenerator.Wizard.outputDirMsg        = Input the output directory.
ObjStoreDDLGenerator.Wizard.storageSpaceNameMsg = Please enter the StorageSpace name of the target. If not specified, then all to the target. If you want to specify more than one, please, separated by commas.
ObjStoreDDLGenerator.Wizard.templateDirMsg      = Please enter the directory where the Template is stored.

PackageExport.Silent.notExistsConfigFileMsg      = package config file does not exist. path={0}
PackageExport.Silent.requiredConfigFileMsg       = config file path is required. key={0}
PackageExport.Wizard.confirmExportAllEntityMsg   = Do you want to Export the Entity data of all?
PackageExport.Wizard.confirmExportAllMetaMsg     = Do you want to Export all the metadata?
PackageExport.Wizard.confirmExportEntityMsg      = Do you want to Export the Entity data?
PackageExport.Wizard.confirmExportMetaMsg        = Do you want to Export the metadata?
PackageExport.Wizard.confirmExportPackageMsg     = Do you want to create the Package with the contents of the above?
PackageExport.Wizard.confirmIncludeTenantMetaMsg = Do you want to Export the Tenant metadata?
PackageExport.Wizard.confirmIncludeUserEntityMsg = Do you want to Export the User Entity data?
PackageExport.Wizard.confirmRetryMsg             = Do you try again?
PackageExport.Wizard.confirmShowEntityListMsg    = Target entity is {0}. Do you want to display a list?
PackageExport.Wizard.confirmShowMetaListMsg      = Target metadata is {0}. Do you want to display a list?
PackageExport.Wizard.confirmTargetLocalMetaMsg   = Do you want to Export to target only the metadata of the Local?
PackageExport.Wizard.inputDirMsg                 = Input the output directory.
PackageExport.Wizard.inputEntityPathMsg          = Please specify the entity name the Export target. (Example : mtp.*,samples.Sample01,sample2.sub.*)
PackageExport.Wizard.inputLocaleMsg              = Input the Locale of output.
PackageExport.Wizard.inputMetaPathMsg            = Please specify the metadata path the Export target. (Example : /action/mtp/*, /ntity/Sample01, /entity/samples/*)
PackageExport.Wizard.inputPackageNameMsg         = Input the Package name.
PackageExport.Wizard.inputTimezoneMsg            = Input the TimeZone of output.
PackageExport.Wizard.requiredEntityPathMsg       = Entity name is required.
PackageExport.Wizard.requiredMetaPathMsg         = Metadata path is required.
PackageExport.Wizard.targetEmptyMsg              = Export target has not been specified.
PackageExport.completedExportPackageLog          = Completed a Package create. : file = {0}
PackageExport.createdDirMsg                      = Created a directory. : dir = {0}
PackageExport.createdPackageInfoLog              = Registered the Package information. : oid = {0}
PackageExport.excludeNotLocalMetaLog             = Excluded from [{0}] is not a Local.
PackageExport.notDirMsg                          = [{0}] is not a directory.
PackageExport.notFoundEntityLog                  = Match the [{0}] entity is not found.
PackageExport.notFoundMetaLog                    = Match the [{0}] metadata is not found.
PackageExport.notFoundPackageInfoLog             = Can not get Package information. : oid = {0}
PackageExport.startExportPackageLog              = Start creating the Package.

PackageImport.Silent.notExistsConfigFileMsg               = package config file does not exist. path={0}
PackageImport.Silent.requiredConfigFileMsg                = config file path is required. key={0}
PackageImport.Wizard.confirmForceUpdateMsg                = Even when there is no change, does it update compulsorily?
PackageImport.Wizard.confirmIgnoreNotExistsPropertyMsg    = Do you want to continue the Import property that does not exist will ignore?
PackageImport.Wizard.confirmImportPackageMsg              = Do you want to import the Package with the contents of the above?
PackageImport.Wizard.confirmNotifyListenerMsg             = Do you want to run the Listner?
PackageImport.Wizard.confirmRetryMsg                      = Do you try again?
PackageImport.Wizard.confirmShowEntityListMsg             = Target entity is {0}. Do you want to display a list?
PackageImport.Wizard.confirmShowMetaListMsg               = Target metadata is {0}. Do you want to display a list?
PackageImport.Wizard.confirmSkipErrorDataMsg              = Do you want to continue the Import to skip the error data?
PackageImport.Wizard.confirmTrancateDataMsg               = Do you want to delete all the existing data?
PackageImport.Wizard.confirmUpdateDisupdatablePropertyMsg = Do you want to update the update disabled properties?
PackageImport.Wizard.confirmWithValidationMsg             = Do you want to run the Validation?
PackageImport.Wizard.inputCommitUnitMsg                   = Input the commit unit.
PackageImport.Wizard.inputImportFileMsg                   = Input the import file path.
PackageImport.Wizard.inputLocaleMsg                       = Input the Locale of import file.
PackageImport.Wizard.inputOIDPrefixMsg                    = Input the OID prefix.
PackageImport.Wizard.inputTimezoneMsg                     = Input the TimeZone of import file.
PackageImport.Wizard.notIncludeEntityMsg                  = Target entity is zero.
PackageImport.Wizard.notIncludeMetaMsg                    = Target metadata is zero.
PackageImport.Wizard.requiredImportFilePathMsg            = Import file path is required.
PackageImport.completedImportEntityDataLog                = Complete. [{0}] : ins({1}),upd({2}),err({3})
PackageImport.completedImportEntityLog                    = The import of the Entity data is complete.
PackageImport.completedImportMetaLog                      = The import of the metadata is complete.
PackageImport.completedImportPackageLog                   = Completed a Package import. : file = {0}
PackageImport.continueLog                                 = Continue the process.
PackageImport.createdDirMsg                               = Created a directory. : dir = {0}
PackageImport.createdPackageInfoLog                       = Registered the Package information. : oid = {0}
PackageImport.errorAnalysisFileMsg                        = An error has occurred in the analysis of the import file. : {0}
PackageImport.errorImportEntityDataLog                    = Error. [{0}]
PackageImport.includeWarnTenantMetaMsg                    = Tenant data of warning is included. Skip because they do not import this data in a batch process.
PackageImport.notDirMsg                                   = [{0}] is not a directory.
PackageImport.notExistsImportFileMsg                      = Import file does not exist.
PackageImport.notIncludeEntityLog                         = Entity data is not included.
PackageImport.notIncludeMetaLog                           = Metadata is not included.
PackageImport.startImportEntityDataLog                    = Start. [{0}]
PackageImport.startImportEntityLog                        = Start the import of Entity data.
PackageImport.startImportMetaLog                          = Start the import of metadata.
PackageImport.warnOIDPrefixMsg                            = Please enter only alphanumeric OID prefix.

SqlServerPartitionManager.Create.createdPartitionMsg = Created a Partition. : id = {0}

StorageSpaceCleaner.Wizard.entityNameMsg       = Input the entity name.
StorageSpaceCleaner.Wizard.invalidTenantIdMsg  = Please enter only numeric.
StorageSpaceCleaner.Wizard.storageSpaceNameMsg = Input the StorageSpace name.
StorageSpaceCleaner.Wizard.tenantIdMsg         = Input the tenant ID.
StorageSpaceCleaner.failedCleanup              = StorageSpace cleanup failed.
StorageSpaceCleaner.notFoundEntity             = Entity of entity ID({0}) can not be found.
StorageSpaceCleaner.notFoundTenant             = Tenant of tenant ID({0}) can not be found.

StorageSpaceMigration.Wizard.confirmCleanupMsg   = Do you want to clean up the migrate source StorageSpace?
StorageSpaceMigration.Wizard.entityNameMsg       = Input the entity name.
StorageSpaceMigration.Wizard.invalidTenantIdMsg  = Please enter only numeric.
StorageSpaceMigration.Wizard.storageSpaceNameMsg = Input the StorageSpace name to be migrated destination.
StorageSpaceMigration.Wizard.tenantIdMsg         = Input the tenant ID.
StorageSpaceMigration.failedCleanup              = StorageSpace cleanup failed.
StorageSpaceMigration.failedMigrate              = StorageSpace migration failed.
StorageSpaceMigration.notFoundEntity             = Entity of entity ID({0}) can not be found.
StorageSpaceMigration.notFoundTenant             = Tenant of tenant ID({0}) can not be found.

TenantBatch.Create.Wizard.confirmCreateTenantMsg  = Do you want to create a tenant with the contents of the above?
TenantBatch.Create.Wizard.confirmDefaultMsg       = Other settings Do you want a standard?
TenantBatch.Create.Wizard.createBlankTenantMsg    = Do you want to create a blank tenant? (Tenant meta data, admin user only created)
TenantBatch.Create.Wizard.existsTenantMsg         = Is not available because {0} already exists.
TenantBatch.Create.Wizard.inputAdminIdMsg         = Input the admin user id.
TenantBatch.Create.Wizard.inputAdminPWMsg         = Input the admin user password.
TenantBatch.Create.Wizard.inputReTypeAdminPWMsg   = Please enter the admin user password again.
TenantBatch.Create.Wizard.inputTenantDispNameMsg  = Input the tenant display name.
TenantBatch.Create.Wizard.inputTenantNameMsg      = Input the tenant name. (-show: Tenant List, -env:Environment)
TenantBatch.Create.Wizard.inputTenantUrlMsg       = Input the tenant URL.
TenantBatch.Create.Wizard.inputTopUrlMsg          = Input the top url.
TenantBatch.Create.Wizard.requiredAdminIdMsg      = Admin user id is required.
TenantBatch.Create.Wizard.requiredAdminPWMsg      = Admin user password is required.
TenantBatch.Create.Wizard.requiredTenantNameMsg   = Tenant name is required.
TenantBatch.Create.Wizard.useMultiLangMsg         = If you want to use multiple languages, please input your language. (Example: ja,en)
TenantBatch.Create.Wizard.useSubPartitionMsg      = Do you want to use the sub-partition?
TenantBatch.Delete.Wizard.confirmDropPartitionMsg = Do you want to drop the Partition?
TenantBatch.Delete.Wizard.confirmRemoveTenantMsg  = Do you want to remove a tenant with the contents of the above?

TenantManagerApp.TenantCreateDialog.confirmCreateTenantMsg        = Create the tenant. Would you like?
TenantManagerApp.TenantCreateDialog.createCompleteMsg             = Create the tenant has been completed.
TenantManagerApp.TenantCreateDialog.createTenantLabel             = Create the tenant.
TenantManagerApp.TenantCreateDialog.existsTenantMsg               = Tenant of the same url already exists.
TenantManagerApp.TenantCreateDialog.messageFont                   = Monospaced
TenantManagerApp.TenantCreateDialog.warnAlterTablePermissionLabel = *To create Partition, the you must have ALTER TABLE permissions.
TenantManagerApp.TenantDeleteDialog.confirmRemoveTenantMsg        = Remove the tenant. Would you like?
TenantManagerApp.TenantDeleteDialog.messageFont                   = Monospaced
TenantManagerApp.TenantDeleteDialog.removeCompleteMsg             = Remove the tenant has been completed.
TenantManagerApp.TenantDeleteDialog.removeStartLog                = Start to remove the tenant. : name = {0} , id = {1}
TenantManagerApp.TenantDeleteDialog.removeTenantLabel             = Remove the tenant below.
TenantManagerApp.TenantDeleteDialog.warnAlterTablePermissionLabel = *If you want to drop Partition, the you must have ALTER TABLE permissions.
TenantManagerApp.TenantDeleteDialog.warnTrancateLabel             = *You can not be revived because the tenant is physically removed.
TenantManagerApp.requiredSelectTenantMsg                          = Please select a tenant of the target from the list.
